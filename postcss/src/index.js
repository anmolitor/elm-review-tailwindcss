import * as fs from "fs";
import { createRequire } from "module";
import * as path from "path";
import * as url from "url";

let localRequire = createRequire(import.meta.url);

const { dependencies, version: pluginVersion } =
  localRequire("../package.json");
const elmPackageName = "elm-review-tailwindcss";

const __dirname = url.fileURLToPath(new URL(".", import.meta.url));

let pkgFile = localRequire.resolve("tailwindcss/package.json", {
  paths: [__dirname],
});

let pkgDir = path.dirname(pkgFile);

const createContext = localRequire(
  path.join(pkgDir, "lib/lib/setupContextUtils")
).createContext;

const resolveConfig = localRequire(path.join(pkgDir, "resolveConfig"));

/**
 * @typedef {Object} Options
 * @property {string} [outputSourceDir] - defaults to "review/src",
 * @property {string} [outputModuleName] - defaults to "TailwindCss.ClassOrder",
 * @property {import('tailwindcss').Config} [tailwindConfig] - defaults to {},
 *
 * @param {Options} options
 * @returns {import('postcss').Plugin}
 */
function plugin(options = {}) {
  const {
    outputSourceDir = "review/src",
    outputModuleName = "TailwindCss.ClassOrder",
    tailwindConfig = {},
  } = options;
  const outputFileName = path.join(
    outputSourceDir.replace("/", path.sep),
    outputModuleName.replace(".", path.sep) + ".elm"
  );

  /**
   * @type {Map<string, string[]>} tailwindClassesAndAffectedProps
   */
  const tailwindClassesAndAffectedProps = new Map();
  const sourceFiles = new Set();
  return {
    postcssPlugin: "elm-review-tailwind-css-plugin",
    /**
     *
     * @param {import('postcss').Declaration} decl
     */
    Declaration(decl) {
      const selector = decl.parent.selector;
      const className = selectorToTailwindClassName(selector);
      // ignore custom properties
      if (decl.prop.startsWith("--") || !className) {
        return;
      }
      const previousProps = tailwindClassesAndAffectedProps.get(className);
      if (previousProps) {
        previousProps.push(decl.prop);
        return;
      }
      tailwindClassesAndAffectedProps.set(className, [decl.prop]);
    },
    /**
     *
     * @param {import('postcss').Document} document
     */
    Document(document) {
      const sourceFile = document.source?.input.from;
      if (sourceFile) {
        sourceFiles.add(document.source.input.from);
      }
    },
    OnceExit() {
      const ctx = createContext(resolveConfig(tailwindConfig));
      const classOrder = ctx.getClassOrder(
        Array.from(tailwindClassesAndAffectedProps.keys())
      );

      fs.mkdirSync(path.dirname(outputFileName), { recursive: true });
      fs.writeFileSync(
        outputFileName,
        `{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}


module ${outputModuleName} exposing (classOrder, classProps)

{-| 
  This file was automatically generated by
  - [\`elm-review-tailwindcss-postcss-plugin\`](https://www.npmjs.com/package/elm-review-tailwindcss-postcss-plugin) ${pluginVersion}
  - \`postcss\` ${dependencies.postcssVersion}
  - the following source files: ${Array.from(sourceFiles).join(", ")}
  
  To use it, add the accompanying elm-review rule to your \`review/elm.json\` via  \`elm install ${elmPackageName}\`.
  
  @docs classOrder, classProps

-}

import Dict
import Set


{-| A Dict containing all classes declared in your css files with associated weights for
    the TailwindCSS recommended class order.

    Lower weight means the class needs to be further to the left of the class attribute.
    Classes external to Tailwind (declared manually in a css file) have a weight of 0.
-}
classOrder : Dict.Dict String Int
classOrder = 
    Dict.fromList 
        [ ${classOrder
          .map(([className, weight]) => `( "${className}", ${weight ?? 0} )`)
          .join("\n        , ")}
        ]


{-| A Dict containing all classes declared in your css files with associated css properties for
    conflict detection.
-}
classProps : Dict.Dict String (Set String)
classProps = 
    Dict.fromList 
        [ ${Array.from(tailwindClassesAndAffectedProps.entries())
          .map(
            ([className, cssProps]) =>
              `( "${className}", Set.fromList [ ${cssProps
                .map((cssProp) => `"${cssProp}"`)
                .join(", ")} ] )`
          )
          .join("\n        , ")}
        ]
`
      );
    },
  };
}

/**
 *
 * @param {string} selector
 * @returns {string | undefined}
 */
function selectorToTailwindClassName(selector) {
  if (!selector.startsWith(".")) {
    return undefined;
  }
  let className = "";
  let escape = false;
  for (const char of selector.substring(1)) {
    if (char === "\\") {
      escape = true;
      continue;
    }
    if (char === ":" && !escape) {
      return className;
    }
    className += char;
    escape = false;
  }
  return className;
}

plugin.postcss = true;

export const elmReviewTailwindCssPlugin = plugin;
